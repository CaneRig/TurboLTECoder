Заканчивается свободное место. … Когда свободное место закончится, вы не сможете создавать и редактировать файлы, отправлять и получать электронные письма в Gmail, а также выполнять резервное копирование файлов на Google Фото.
function [LLR, extrinsic, alpha_, beta_] = SISO_nonparallel(in, apriori, alpha_init, beta_init, threads)

% SISO-decoder
% MAX-LOG-MAP decoding
% The generation matrix is [1 1 0 1;1 0 1 1] according 
% to the standard
% The input is LLR
% the output is a soft output and external information

sys=in(1,:);              % Input systematic bits
parity=in(2,:);              % input parity bit
in_length=length(in);
blklen = in_length-4;

%Initialisation
least_val = -128;
%branch=zeros(8,2,in_length);     % branch measure, 8 possible states, input is
% 0 or 1
alpha= (least_val*ones(8,in_length));  % forward metric, A(S,k)
alpha(:,1)=alpha_init;                   % register status from all zeros
beta= (least_val*ones(8,in_length+1));% backward metric, B(S,k)
beta(:,in_length+1)=beta_init;         % Register status ended by all zeros
LLR = (zeros(1, in_length));
alpha_ = zeros(8,threads);
beta_ = zeros(8, threads);

% Setting metrics as int32 vars
alpha = int32(alpha);
beta = int32(beta);
LLR = int32(LLR);

%Calculating branch metric, forward metric and LLR
% Precalculating branch values

init_branch1 =   int32(-(apriori+sys+parity)/2);
init_branch2 =   int32(-(apriori+sys-parity)/2);


for k=2:in_length
  
    alpha(1,k)=max((alpha(1,k-1)+init_branch1(k-1)),(alpha(2,k-1)-init_branch1(k-1))) ;
    alpha(2,k)=max((alpha(3,k-1)-init_branch2(k-1)),(alpha(4,k-1)+init_branch2(k-1))) ;
    alpha(3,k)=max((alpha(5,k-1)+init_branch2(k-1)),(alpha(6,k-1)-init_branch2(k-1))) ;
    alpha(4,k)=max((alpha(7,k-1)-init_branch1(k-1)),(alpha(8,k-1)+init_branch1(k-1))) ;
    alpha(5,k)=max((alpha(1,k-1)-init_branch1(k-1)),(alpha(2,k-1)+init_branch1(k-1))) ;
    alpha(6,k)=max((alpha(3,k-1)+init_branch2(k-1)),(alpha(4,k-1)-init_branch2(k-1))) ;
    alpha(7,k)=max((alpha(5,k-1)-init_branch2(k-1)),(alpha(6,k-1)+init_branch2(k-1))) ;
    alpha(8,k)=max((alpha(7,k-1)+init_branch1(k-1)),(alpha(8,k-1)-init_branch1(k-1))) ; 
    
    alpha(:,k) = alpha(:,k) - alpha(1, k);
    
end

%Calculating backward metric
for k=in_length:-1:1
        beta(1,k)=max((beta(1,k+1)+init_branch1(k)),(beta(5,k+1)-init_branch1(k))) ;
        beta(2,k)=max((beta(5,k+1)+init_branch1(k)),(beta(1,k+1)-init_branch1(k))) ;
        beta(3,k)=max((beta(6,k+1)+init_branch2(k)),(beta(2,k+1)-init_branch2(k))) ;
        beta(4,k)=max((beta(2,k+1)+init_branch2(k)),(beta(6,k+1)-init_branch2(k))) ;
        beta(5,k)=max((beta(3,k+1)+init_branch2(k)),(beta(7,k+1)-init_branch2(k))) ;
        beta(6,k)=max((beta(7,k+1)+init_branch2(k)),(beta(3,k+1)-init_branch2(k))) ;
        beta(7,k)=max((beta(8,k+1)+init_branch1(k)),(beta(4,k+1)-init_branch1(k))) ;
        beta(8,k)=max((beta(4,k+1)+init_branch1(k)),(beta(8,k+1)-init_branch1(k))) ;
        
        beta(:,k) = beta(:,k) - beta(1,k);

        % Calculation of LLR
        LLR(k)=max(...
        max(...
            max((alpha(1,k)-init_branch1(k)+beta(5,k+1)),
                (alpha(2,k)-init_branch1(k)+beta(1,k+1))),...
            max((alpha(3,k)-init_branch2(k)+beta(2,k+1)),
                (alpha(4,k)-init_branch2(k)+beta(6,k+1)))),...
     max(...max((alpha(5,k)-init_branch2(k)+beta(7,k+1)),
                (alpha(6,k)-init_branch2(k)+beta(3,k+1))),...
            max((alpha(7,k)-init_branch1(k)+beta(4,k+1)),
                (alpha(8,k)-init_branch1(k)+beta(8,k+1))))...
            )...
         - max(...
            max(...
            max((alpha(1,k)+init_branch1(k)+beta(1,k+1)),
                (alpha(2,k)+init_branch1(k)+beta(5,k+1))),...
            max((alpha(3,k)+init_branch2(k)+beta(6,k+1)),
                (alpha(4,k)+init_branch2(k)+beta(2,k+1)))),...
     max(...max((alpha(5,k)+init_branch2(k)+beta(3,k+1)),
                (alpha(6,k)+init_branch2(k)+beta(7,k+1))),...
            max((alpha(7,k)+init_branch1(k)+beta(8,k+1)),
                (alpha(8,k)+init_branch1(k)+beta(4,k+1))))...
            );
end

        extrinsic=  (0.75*(LLR-apriori-1*sys));
        
        for i=1:threads
            
            index_a = (i)*blklen/threads+1;
            index_b = (i-1)*blklen/threads+2;
            alpha_(:,i) = alpha(:,index_a);
            beta_(:,i) = beta(:, index_b);

        end
        
end